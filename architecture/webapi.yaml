openapi: 3.0.3
info:
  title: homeStockManagementSystem WebAPI
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
  version: 1.0.0
servers:
  - url: https://hogehogefugafuga/api/v1
tags:
  - name: item
    description: システムに登録する商品情報の取得、登録を行う
  - name: stock
    description: 在庫の入庫、出庫を行う
  - name: user
    description: ユーザ情報の登録、取得を行う
  - name: auth
    description: 認証処理を行う
  - name: category
    description: カテゴリー情報の登録を行う

paths:
  /item/{code}:
    get:
      tags:
        - item
      summary: バーコードに対応する商品情報を取得する
      description: バーコードに対応する商品情報を外部APIを用いて取得する。DBに登録されていない商品の場合は、DBに登録する
      operationId: getItem
      responses:
        "200":
          description: バーコードに対応する商品情報が存在する
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "404":
          description: バーコードに対応する商品情報が存在しない
      security:
        - api_key: []
  /stock:
    get:
      tags:
        - stock
      summary: 現時点の在庫情報の一覧を取得する
      description: 現時点での在庫情報の一覧を取得する。
      operationId: findPetsByStatus
      parameters:
        - name: stock_quantity
          in: query
          description: 指定した値以下の在庫数の商品を取得する
          required: false
          explode: true
          schema:
            type: integer
            format: int64
            example: 3
        - name: name
          in: query
          description: 商品名が指定した文字列に部分一致する商品を取得する
          required: false
          explode: true
          schema:
            type: string
            example: ルーズリーフ
        - name: expiration_date
          in: query
          description: このパラメータには現在日より未来日を指定する。現在日から指定した日付までの間に賞味期限が存在する商品を取得する。このパラメータを指定した場合は、賞味期限を持たない商品は検索対象外となる。
          explode: true
          schema:
            type: string
            format: date
            example: "2023-01-31"
        - name: not_include_zero
          in: query
          description: trueを指定した場合、在庫数が0の商品を検索外とする。falseを指定またはパラメータを使用しない場合は在庫数が0の商品は検索対象とする。
          explode: true
          schema:
            type: boolean
            default: true
            example: true
      responses:
        "200":
          description: 在庫情報の取得に成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stocks"
        "401":
          description: パラメータの指定の仕方に誤りが存在する

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /auth/signup:
    post:
      tags:
        - auth
      summary: リクエストの内容でユーザを作成する
      description: ""
      parameters:
        - name: userId
          in: query
          description: ユーザID
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: ユーザ名
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: パスワード
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: メールアドレス
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ユーザ作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signup"
        "400":
          description: バリイデーションエラー
  /auth/signin:
    post:
      tags:
        - auth
      summary: リクエストのユーザIDトパスワードでログイン認証を行う
      description: ""
      parameters:
        - name: userId
          in: query
          description: ログイン認証を行うユーザID
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: ログイン認証を行うユーザのパスワード
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signin"
        "400":
          description: バリイデーションエラー
        "401":
          description: 認証エラー
  /auth/signout:
    delete:
      tags:
        - auth
      summary: ログアウト処理を行う
      description: ""
      parameters: []
      responses:
        "200":
          description: ログアウト成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signout"
        "401":
          description: 認証エラー

  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    item:
      type: object
      properties:
        itemId:
          type: integer
          format: int64
          example: 1
        code:
          type: integer
          format: int64
          example: 4901480070032
        itemName:
          type: string
          example: キャベツ
        categoryId:
          type: string
          example: food
        categoryName:
          type: string
          example: 食料品
        minLimit:
          type: integer
          format: int64
          example: 1
    signin:
      type: object
      properties:
        userId:
          type: string
          example: testid
        username:
          type: string
          example: testuser
        email:
          type: string
          example: test@ofhweo.com
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQ1N2Q4MjNhLTk1YmUtNGZmYi05YTNlLTgxZWZkODJkMmE4NCIsInVzZXJuYW1lIjoidGVzdDIiLCJpYXQiOjE2ODA5NjMwMDcsImV4cCI6MTY4MDk2NjYwN30.CWpTmLkyciCozawzuCQuHpCtmR1XRfzG0wET6TtZ9Mk
    signup:
      type: object
      properties:
        userId:
          type: string
          example: testid
        username:
          type: string
          example: testuser
        email:
          type: string
          example: test@ofhweo.com
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    signout:
      type: object
      properties:
        userId:
          type: string
          example: testid
    stocks:
      type: object
      properties:
        stocks:
          type: array
          items:
            $ref: "#/components/schemas/stock"
    stock:
      type: object
      properties:
        stockId:
          type: integer
          format: int64
          example: 1
        stockQuantity:
          type: number
          example: 1
        item:
          items:
            $ref: "#/components/schemas/item"
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Pet"
        application/xml:
          schema:
            $ref: "#/components/schemas/Pet"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
