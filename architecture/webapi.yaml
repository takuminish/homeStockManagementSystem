openapi: 3.0.3
info:
  title: homeStockManagementSystem WebAPI
  description: |-
    家用在庫管理アプリのWebAPI
  version: 1.0.0
servers:
  - url: https://hogehogefugafuga/api/v1
tags:
  - name: item
    description: システムに登録する商品情報の取得、登録を行う
  - name: stock
    description: 在庫の入庫、出庫を行う
  - name: user
    description: ユーザ情報の登録、取得を行う
  - name: auth
    description: 認証処理を行う

paths:
  /item/{code}:
    get:
      tags:
        - item
      summary: バーコードに対応する商品情報を取得する
      description: バーコードに対応する商品情報を外部APIを用いて取得する。DBに登録されていない商品の場合は、DBに登録する
      operationId: getItem
      responses:
        "200":
          description: バーコードに対応する商品情報が存在する
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        "404":
          description: バーコードに対応する商品情報が存在しない
      security:
        - api_key: []
  /stock:
    get:
      tags:
        - stock
      summary: 現時点の在庫情報の一覧を取得する
      description: 現時点での在庫情報の一覧を取得する。
      operationId: findPetsByStatus
      parameters:
        - name: stock_quantity
          in: query
          description: 指定した値以下の在庫数の商品を取得する
          required: false
          explode: true
          schema:
            type: integer
            format: int64
            example: 3
        - name: name
          in: query
          description: 商品名が指定した文字列に部分一致する商品を取得する
          required: false
          explode: true
          schema:
            type: string
            example: ルーズリーフ
        - name: expiration_date
          in: query
          description: このパラメータには現在日より未来日を指定する。現在日から指定した日付までの間に賞味期限が存在する商品を取得する。このパラメータを指定した場合は、賞味期限を持たない商品は検索対象外となる。
          explode: true
          schema:
            type: string
            format: date
            example: "2023-01-31"
        - name: not_include_zero
          in: query
          description: trueを指定した場合、在庫数が0の商品を検索外とする。falseを指定またはパラメータを使用しない場合は在庫数が0の商品は検索対象とする。
          explode: true
          schema:
            type: boolean
            default: true
            example: true
      responses:
        "200":
          description: 在庫情報の取得に成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stocks"
        "401":
          description: パラメータの指定の仕方に誤りが存在する
    post:
      tags:
        - stock
      summary: 在庫の入庫登録を行う
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      itemId:
                        type: integer
                        format: int64
                        example: 1
                      quantity:
                        type: integer
                        format: int64
                        example: 1
      responses:
        "200":
          description: 在庫情報の取得に成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/stocks"
        "401":
          description: パラメータの指定の仕方に誤りが存在する
  /auth/signup:
    post:
      tags:
        - auth
      summary: リクエストの内容でユーザを作成する
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        "200":
          description: ユーザ作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signup"
        "400":
          description: バリイデーションエラー
  /auth/signin:
    post:
      tags:
        - auth
      summary: リクエストのユーザIDトパスワードでログイン認証を行う
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: ログイン成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signin"
        "400":
          description: バリイデーションエラー
        "401":
          description: 認証エラー
  /auth/signout:
    delete:
      tags:
        - auth
      summary: ログアウト処理を行う
      description: ""
      responses:
        "200":
          description: ログアウト成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/signout"
        "401":
          description: 認証エラー

  /user:
    get:
      tags:
        - user
      summary: ユーザ情報の取得
      parameters:
        - name: accessToken
          in: path
          description: "ログイン認証で主徳したアクセストークン"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "403":
          description: 有効なaccessTokennでない場合、権限エラー
components:
  schemas:
    item:
      type: object
      properties:
        itemId:
          type: integer
          format: int64
          example: 1
        code:
          type: integer
          format: int64
          example: 4901480070032
        itemName:
          type: string
          example: キャベツ
        categoryId:
          type: string
          example: food
        categoryName:
          type: string
          example: 食料品
        minLimit:
          type: integer
          format: int64
          example: 1
    signin:
      type: object
      properties:
        userId:
          type: string
          example: testid
        username:
          type: string
          example: testuser
        email:
          type: string
          example: test@ofhweo.com
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQ1N2Q4MjNhLTk1YmUtNGZmYi05YTNlLTgxZWZkODJkMmE4NCIsInVzZXJuYW1lIjoidGVzdDIiLCJpYXQiOjE2ODA5NjMwMDcsImV4cCI6MTY4MDk2NjYwN30.CWpTmLkyciCozawzuCQuHpCtmR1XRfzG0wET6TtZ9Mk
    user:
      type: object
      properties:
        userId:
          type: string
          example: testid
        username:
          type: string
          example: testuser
        email:
          type: string
          example: test@ofhweo.com
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    signup:
      type: object
      properties:
        userId:
          type: string
          example: testid
        username:
          type: string
          example: testuser
        email:
          type: string
          example: test@ofhweo.com
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    signout:
      type: object
      properties:
        userId:
          type: string
          example: testid
    stocks:
      type: object
      properties:
        stocks:
          type: array
          items:
            $ref: "#/components/schemas/stock"
    stock:
      type: object
      properties:
        stockId:
          type: integer
          format: int64
          example: 1
        stockQuantity:
          type: number
          example: 1
        item:
          items:
            $ref: "#/components/schemas/item"
